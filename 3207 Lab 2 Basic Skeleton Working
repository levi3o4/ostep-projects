#include <stdio.h>
#include <stdlib.h>
#define PROMPT "myshell~: "
#define CD 0
#define CLR 1
#define DIR 2
#define ENVIRON 3
#define ECHO 4
#define HELP 5
#define PAUSE 6

int shell (FILE* stream);
char** parseLine (FILE* stream);
char** splitLine (char* line);
int countTokens (char* line);
void fastForewardThroughChars (char** ptr);
void fastForewardThroughSpaces (char** ptr);
void fillStringArray (char* line, char** array, int size);
void copyTokenIntoArray (char** s1Ptr, char** s2Ptr);
void copyToken (char* s1, char** s2Ptr);
int tokenLength (char* string);
int stringMatch (char* string1, char* string2);
int interpret (char** argv);
int idFunction (char* argName);

int numBuiltIn = 7;
char* builtIn[7] = {"cd",       //0
                    "clr",      //1
                    "dir",      //2
                    "environ",  //3
                    "echo",     //4
                    "help",     //5
                    "pause"};   //6

int main(int argc, char* argv[]) {
    
    /* //PARSE TESTING
    //FILE* stream = fopen("test.txt", "r");
    FILE* stream = stdin;
    
    char** array = parseLine(stream);
    
    for (int offset = 0; *(array + offset) != NULL; offset++) {
        printf("%s.\n", *(array + offset));
    }
    */
    
    /* //STRING MATCH TESTING
    char* Help = "Help";
    
    printf("%d", stringMatch("Help", Help));
    */
    
    
    //ACTUAL main
    
    FILE* stream = stdin;
    
    if (argc == 2) {
        
        stream = fopen(argv[1], "r");
        
        if (stream == NULL) {
            
            printf("%s\n", "Error: batch file not found.");
            exit(1);
        }
    }
    
    shell(stream);
    
    if (stream != stdin) {
        fclose(stream);
    }
    
    exit(0);
}

int shell (FILE* stream) {

    char* line = NULL;
    size_t num = 0;
    
    if (stream == stdin) {
        printf("%s", PROMPT);
    }
    
    char** argv = parseLine(stream);
    
    while (argv != NULL && !stringMatch(*argv, "quit")) {    
        
        /*
        for (int offset = 0; *(argv + offset) != NULL; offset++) {
            printf("%s.\n", *(argv + offset));
        }
        */
        
        interpret(argv);
       
        if (stream == stdin) {
            printf("%s", PROMPT);
        }
        
        argv = parseLine(stream);
    }

}

char** parseLine (FILE* stream) {

    char* line = NULL;
    size_t num = 0;
    
    if(getline(&line, &num, stream) == -1) {
        
        fprintf(stderr, "Error: unable to read line from input stream.");
        return NULL;
        
    } else {
        return splitLine(line);    
    }
}

char** splitLine (char* line) {
    
    int numTokens = countTokens(line);

    char** array = (char**) malloc((numTokens + 1) * (sizeof(char*)));
    
    fillStringArray(line, array, numTokens);
    
    return array;
}

int countTokens (char* line) {
    
    int count = 0;
    
    while (*line != '\0' && *line != '\n') {
        
        if (*line != ' ') {
            
            count++;
            fastForewardThroughChars(&line);
        }
        
        fastForewardThroughSpaces(&line);
    }
    
    return count;
}

void fastForewardThroughChars (char** ptr) {
    
    for (; **ptr != '\0' && **ptr != ' '; (*ptr)++) {
        ;
    }
    
    return;
}

void fastForewardThroughSpaces (char** ptr) {
    
    for (; **ptr == ' '; (*ptr)++) {
        ;
    }
    
    return;
}

void fillStringArray (char* line, char** array, int size) {

    for (int i = 0; i < size; i++, array++) {
        
        fastForewardThroughSpaces(&line);
        
        copyTokenIntoArray(&line, array);
    }
    
    *array = NULL;
    
    return;
}

void copyTokenIntoArray (char** s1Ptr, char** s2Ptr) {
    
    int length = tokenLength(*s1Ptr);

    *s2Ptr = (char*) malloc((length + 1) * sizeof(char));
    
    copyToken (*s1Ptr, s2Ptr);
    
    fastForewardThroughChars(s1Ptr);
    
    return;
}

void copyToken (char* s1, char** s2Ptr) {
    
    int s2Offset = 0;
    
    for (; *s1 != '\0' && *s1 != ' ' && *s1 != '\n'; s1++, s2Offset++) {
        
        *(*s2Ptr + s2Offset) = *s1;
    }
    
    *(*s2Ptr + s2Offset) = '\0';
    
    return;
}

int tokenLength (char* string) {

    int count = 0;

    for (; *(string + count) != ' ' && *(string + count) != '\0' && *(string + count) != '\n'; count++) {
        ;
    }

    return count;
}

int stringMatch (char* string1, char* string2) {

    if (tokenLength(string1) != tokenLength(string2)) {
        return 0;
    }
    
    for (int offset = 0; *(string1 + offset) != '\0'; offset++) {
        if (*(string1 + offset) != *(string2 + offset)) {
            return 0;
        }
    }
    
    return 1;
}

int interpret (char** argv) {

    int num = idFunction(*argv);

    switch (num) {
        
        case CD :
            printf("%s\n","cd");
            break;
            
        case CLR :
            printf("%s\n","clr");
            break;
        
        case DIR :
            printf("%s\n","dir");
            break;
        
        case ENVIRON :
            printf("%s\n","environ");
            break;
        
        case ECHO :
            printf("%s\n","echo");
            break;
        
        case HELP :
            printf("%s\n","help");
            break;
        
        case PAUSE :
            printf("%s\n","pause");
            break;
        
        default :
            printf("%s\n","launch program");
            break;
    }

    return num;
}

int idFunction (char* argName) {
    
    for (int i = 0; i < numBuiltIn; i++) {
        
        if (stringMatch(argName, *(builtIn + i))) {
            return i;
        }
    }
    
    return numBuiltIn;
}


// Testing for beginning ambersand
/*    
    char* progName = *argv;
    
    if (**argv == '&') {
        
        if (stringMatch(*argv, "&")) {
            
            progName = *(argv + 1);
        
        } else {
            
            progName = **(argv + 1);
        }
    }
*/
