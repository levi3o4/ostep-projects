
#include <stdio.h>
#include <stdlib.h>

int checkDictionary (char* request);
int stringCompare (char* word1, char* word2);
int snipNonLetters (char* word);
void toLowerCase (char* wordPtr);
void resizeDictionary (int size);
int addingWords (int offset);
void loadDictionary ();

FILE* dictionaryFile;
int dictionarySize = 235887;
char** dictionary;

int main () {
    
    loadDictionary();
    
    /*
    for (int i = 0; i < dictionarySize; i++) {
        printf("%s\n", *(dictionary + i));
    }
    */
    
    printf("%s\n", "Give me a word.");
    char sample[100];
    scanf("%s", sample);
    printf("%d\n", checkDictionary(sample));
    
}

void loadDictionary () {
    
    if ((dictionaryFile = fopen("dictionary.txt", "r")) != NULL) {
    
    if ((dictionary = malloc(dictionarySize * sizeof(char**))) == NULL) {
        printf("%s\n", "Error - malloc failure");
        exit (1);
    }
    
    int offset = 0;
    
    for (; addingWords(offset); offset++) {
        ;
    }
    
    resizeDictionary(offset);
    
    } else {
        printf("%s\n", "Error - unable to open dictionary file");
        exit (1);
    }
}

int addingWords (int offset) {
            
    //*(dictionary + offset) = NULL;
    char* temp = NULL;
    size_t useless = 0;        
    
    int wordIsPresent = getline(&temp, &useless, dictionaryFile);
    
    if (wordIsPresent != -1 && offset == dictionarySize) {
                
        resizeDictionary(dictionarySize * 3);
    }
           
    *(dictionary + offset) = temp;
            
    snipNonLetters(*(dictionary + offset));
    toLowerCase(*(dictionary + offset));
    
    if (wordIsPresent != -1) {
        return 1;
    }
    
    return 0;
}

void resizeDictionary (int size) {
    
    dictionarySize = size;
        
    if ((dictionary = realloc(dictionary, dictionarySize * sizeof(char**))) == NULL) {
        printf("%s\n", "Error - realloc failure");
        exit (1);
    }
}

int snipNonLetters (char* word) {

    int offset = 0;

    for (; *(word + offset) != '\0'; offset++) {
        if ((*(word + offset) < 'A' || *(word + offset) > 'Z') 
            && (*(word + offset) < 'a' || *(word + offset) > 'z')
            && *(word + offset + 1) == '\0') {
            
            *(word + offset) = '\0';
        }
    }
}

void toLowerCase (char* word) {
    
    for (int offset = 0; *(word + offset) != '\0'; offset++) {
        if ('A' <= *(word + offset) && *(word + offset) <= 'Z') {
            *(word + offset) += ('a' - 'A');
        }
    }
    
    //printf("%s\n", word);
}

int checkDictionary (char* request) {
    
    toLowerCase(request);
    
    int left = 0;
    int right = dictionarySize - 1;
  
    while (left <= right) {
  
	    int mean = (left + right) / 2;
	    int comp = stringCompare (request, dictionary[mean]);
	    //printf("%s vs %s\n", request, dictionary[mean]);
	    
	    if (!comp) { //requested word has been found
	  	    return 1;
	    
	    } else if (comp < 0) { //requested word would appear earlier in dictionary
	  	    right = mean - 1;
	    
	    } else { //requested word would appear later in dictionary
	  	    left = mean + 1;
	    }
    }
  
    return 0;
}

//Returns a negative value if word1 alphabetically precedes word2,
//a positive value if word2 alphabetically precedes word1,
//or 0 if they are the same word;
//if two words have different lengths but are otherwise the same,
//the shorter word is considered to alphabetically precede the longer one.
int stringCompare (char* word1, char* word2) {
  
    int offset = 0;
  
    for (; *(word1 + offset) != '\0' && *(word2 + offset) != '\0' 
        && *(word1 + offset) == *(word2 + offset); offset++) {
        ;
    }
  
    if (*(word1 + offset) == '\0') { //word1 is done
        
        if (*(word2 + offset) == '\0') { //word2 is also done
            return 0;
            
        } else { //word1 is shorter
            return -1;
        }
        
    } else if (*(word2 + offset) == '\0') { //word2 is shorter
        return 1;
        
    } else {
        return *(word1 + offset) - *(word2 + offset);
    }
}
